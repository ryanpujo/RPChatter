// Mocks generated by Mockito 5.3.2 from annotations
// in ryan_pujo_app/test/user/application/user_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ryan_pujo_app/core/infrastructure/failure/failure.dart' as _i5;
import 'package:ryan_pujo_app/user/domain/user.dart' as _i6;
import 'package:ryan_pujo_app/user/infrastructure/repository/user_repo_contract.dart'
    as _i3;
import 'package:ryan_pujo_app/user/infrastructure/user_dto.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepositoryContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepositoryContract extends _i1.Mock
    implements _i3.UserRepositoryContract {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> registerUser(
          _i7.UserDto? dto) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [dto],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
            _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #registerUser,
            [dto],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
                _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #registerUser,
            [dto],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);
  @override
  _i4.Future<bool> isUsernameAvailable(String? username) => (super.noSuchMethod(
        Invocation.method(
          #isUsernameAvailable,
          [username],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> getByUsername(
          String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByUsername,
          [username],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
            _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #getByUsername,
            [username],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
                _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #getByUsername,
            [username],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);
}
